// Hello.lh

// ベースレイヤ
baselayer
{
	// ベースクラス
	base class Hello
	{
	public:
		Hello();
		base void Print();
		base void Flying(float x,float y);
	};

}

//Ground mode
layer Ground
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

}

//Flight mode
layer Flight
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}

//Nosignal mode
layer Nosignal
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}

//StrongWind mode
layer StrongWind
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}

//Storm mode
layer Storm
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}

//LowPower mode
layer LowPower
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}

//NoPower mode
layer NoPower
{
	partial class Hello
	{
	public:
		partial void Print();
		partial void Flying(float x, float y);
	};

	// アクティベート開始時に実行されるイベントハンドラ
	[eventhandler(activating)]
	void OnActivating();

	// アクティベート終了時に実行されるイベントハンドラ
	[eventhandler(activated)]
	void OnActivated();

	// ディアクティベート開始時に実行されるイベントハンドラ
	[eventhandler(deactivating)]
	void OnDeactivating();

	// ディアクティベート終了時に実行されるイベントハンドラ
	[eventhandler(deactivated)]
	void OnDeactivated();

}




